package de.envite.proa.repository.processmodel;

import de.envite.proa.repository.tables.ProcessModelTable;
import de.envite.proa.repository.tables.RelatedProcessModelTable;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;

import java.util.List;

@ApplicationScoped
public class RelatedProcessModelDao {
    private final EntityManager em;

    private static final String PROCESS_MODEL = "processModel";

    @Inject
    public RelatedProcessModelDao(EntityManager em) {
        this.em = em;
    }

    @Transactional
    public void merge(RelatedProcessModelTable table) {
        em.merge(table);
    }

    @Transactional
    public List<RelatedProcessModelTable> getRelatedProcessModels(ProcessModelTable processModel) {
        return em//
                .createQuery("SELECT rpm FROM RelatedProcessModelTable rpm WHERE rpm.processModel = :processModel", RelatedProcessModelTable.class)
                .setParameter(PROCESS_MODEL, processModel)
                .getResultList();
    }

    @Transactional
    public List<RelatedProcessModelTable> getManuallyAddedRelations(ProcessModelTable processModel) {
        return em//
                .createQuery(
                        "SELECT r FROM RelatedProcessModelTable r WHERE r.processModel = :processModel AND r.manuallyAdded = true",
                        RelatedProcessModelTable.class)
                .setParameter(PROCESS_MODEL, processModel)
                .getResultList();
    }

    @Transactional
    public boolean existsManuallyAddedRelation(ProcessModelTable processModel, ProcessModelTable otherModel) {
        String query = "SELECT COUNT(r) > 0 FROM RelatedProcessModelTable r " +
                "WHERE r.processModel = :processModel " +
                "AND r.relatedProcessModelId = :relatedModelId " +
                "AND r.manuallyAdded = true";
        return em//
                .createQuery(query, Boolean.class)
                .setParameter(PROCESS_MODEL, processModel)
                .setParameter("relatedModelId", otherModel.getId())
                .getSingleResult();
    }

    @Transactional
    public void deleteByProcessModel(ProcessModelTable processModel) {
        em//
                .createQuery("DELETE FROM RelatedProcessModelTable rpm WHERE rpm.processModel = :processModel")
                .setParameter(PROCESS_MODEL, processModel)
                .executeUpdate();
    }

    @Transactional
    public void deleteByRelatedProcessModelId(Long relatedProcessModelId) {
        em//
                .createQuery("DELETE FROM RelatedProcessModelTable rpm WHERE rpm.relatedProcessModelId = :relatedProcessModelId")
                .setParameter("relatedProcessModelId", relatedProcessModelId)
                .executeUpdate();
    }

    @Transactional
    public void deleteAutoGeneratedByProcessModel(ProcessModelTable processModel) {
        em//
                .createQuery("DELETE FROM RelatedProcessModelTable r WHERE r.processModel = :processModel AND r.manuallyAdded = false")
                .setParameter(PROCESS_MODEL, processModel)
                .executeUpdate();
    }
}
