package de.envite.proa.repository.processmodel;

import de.envite.proa.repository.tables.ProcessModelTable;
import de.envite.proa.repository.tables.RelatedProcessModelTable;
import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;

import java.util.List;

@RequestScoped
public class RelatedProcessModelDao {

    private final EntityManager em;
    private static final String PROCESS_MODEL = "processModel";

    @Inject
    public RelatedProcessModelDao(EntityManager em) {
        this.em = em;
    }

    @Transactional
    public void merge(RelatedProcessModelTable table) {
        em.merge(table);
    }

    @Transactional
    public List<RelatedProcessModelTable> getRelatedProcessModels(ProcessModelTable processModel) {
        return em//
                .createQuery("""
						SELECT rpm FROM RelatedProcessModelTable rpm
						WHERE rpm.processModel = :processModel
						""", RelatedProcessModelTable.class)//
                .setParameter(PROCESS_MODEL, processModel)//
                .getResultList();
    }

    @Transactional
    public List<RelatedProcessModelTable> getManuallyAddedRelations(ProcessModelTable processModel) {
        return em//
                .createQuery("""
						SELECT rpm FROM RelatedProcessModelTable rpm
						WHERE rpm.processModel = :processModel
						AND rpm.manuallyAdded = true
						""", RelatedProcessModelTable.class)//
                .setParameter(PROCESS_MODEL, processModel)//
                .getResultList();
    }

    @Transactional
    public boolean existsManuallyAddedRelation(ProcessModelTable processModel, ProcessModelTable otherModel) {
        return em//
                .createQuery("""
						SELECT COUNT(rpm) > 0 FROM RelatedProcessModelTable rpm
						WHERE rpm.processModel = :processModel
						AND rpm.relatedProcessModelId = :relatedModelId
						AND rpm.manuallyAdded = true
						""", Boolean.class)
                .setParameter(PROCESS_MODEL, processModel)//
                .setParameter("relatedModelId", otherModel.getId())//
                .getSingleResult();
    }

    @Transactional
    public void deleteByProcessModel(ProcessModelTable processModel) {
        em//
                .createQuery("""
						DELETE FROM RelatedProcessModelTable rpm
						WHERE rpm.processModel = :processModel
						""")//
                .setParameter(PROCESS_MODEL, processModel)//
                .executeUpdate();
    }

    @Transactional
    public void deleteByRelatedProcessModelId(Long relatedProcessModelId) {
        em//
                .createQuery("""
						DELETE FROM RelatedProcessModelTable rpm
						WHERE rpm.relatedProcessModelId = :relatedProcessModelId
						""")//
                .setParameter("relatedProcessModelId", relatedProcessModelId)//
                .executeUpdate();
    }

    @Transactional
    public void deleteAutoGeneratedByProcessModel(ProcessModelTable processModel) {
        em//
                .createQuery("""
						DELETE FROM RelatedProcessModelTable rpm
						WHERE rpm.processModel = :processModel
						AND rpm.manuallyAdded = false
						""")//
                .setParameter(PROCESS_MODEL, processModel)//
                .executeUpdate();
    }
}
